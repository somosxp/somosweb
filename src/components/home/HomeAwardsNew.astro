---
import PlusIcon from "../icons/PlusIcon.astro";
import AwardButton from "../AwardButton.jsx";
import SectionTitle from "../SectionTitle.tsx";

const { awards } = Astro.props;
---

<section
  class="w-full h-screen relative overflow-hidden bg-[#121212] text-white"
>
  <div class="grid md:grid-cols-2 p-20 relative z-10">
    <SectionTitle title="Awards" class="text-white" />
    <article>
      <h3 class="text-xl award-name">Award name</h3>
      <ul
        class="text-[#808080] flex gap-x-2 divide-x-1 divide-solid divide-[#808080] [&>li]:pr-2 award-years"
      >
        <li>2019</li>
        <li>2020</li>
        <li>2024</li>
      </ul>
      <p class="award-description">sadfafas</p>
    </article>
  </div>
  <div class="relative">
    <div id="buttons" class="absolute top-0 left-0 z-10 text-black">
      {
        awards.map((award: { title: string; image: string }, index: number) => (
          <AwardButton
            index={index + 1}
            title={award.title}
            image={award.image}
          >
            {award.title}
            <PlusIcon />
          </AwardButton>
        ))
      }
    </div>

    <div id="matter-container" class="relative h-screen">
      <canvas id="matter-canvas"></canvas>
    </div>
  </div>
</section>

<script>
  const awards = [
    {
      title: "Award 1",
      image: "/images/project-1.jpeg",
    },
    {
      title: "Award 2",
      image: "/images/project-1.jpeg",
    },
    {
      title: "Award 3",
      image: "/images/project-1.jpeg",
    },
    {
      title: "Award 4",
      image: "/images/project-1.jpeg",
    },
  ];

  import Matter from "matter-js";
  const buttons = document.querySelectorAll(".circle-btn");

  const {
    Engine,
    Render,
    Runner,
    Composite,
    Bodies,
    Events,
    Mouse,
    MouseConstraint,
  } = Matter;

  let engine = Engine.create();
  let world = engine.world;
  const height = 800;

  // Crear Renderizado
  const render = Render.create({
    element: document.getElementById("matter-container"),
    engine: engine,
    canvas: document.getElementById("matter-canvas"),
    options: {
      width: window.innerWidth,
      height,
      background: "#121212",
      wireframes: false,
    },
  });

  Render.run(render);
  const runner = Runner.create();
  Runner.run(runner, engine);

  let totalCircles = 0;
  const totalCirclePerSize = {
    0: 8,
    960: 22,
    1280: 30,
  };

  const currentWindowWidth = window.innerWidth;
  Object.keys(totalCirclePerSize).forEach((key) => {
    const index = parseInt(key);
    if (currentWindowWidth >= index) {
      totalCircles = totalCirclePerSize[index];
    }
  });

  const circles = Array.from({ length: totalCircles }).map((_, index) => {
    // const size = Math.random() * 270 + 30; // Tamaño entre 30 y 300
    let size = 30;
    if (index >= 0 && index <= buttons.length) {
      // random between 300, 270, 250
      size = Math.random() * (300 - 270) + 270;
    } else if (index >= 4) {
      size = Math.random() * (180 - 40) + 40;
    }

    const circle = Bodies.circle(
      Math.random() * window.innerWidth,
      (Math.random() * height) / 2,
      size / 2,
      {
        restitution: 0.8,
        friction: 0.3,
        label: `circle-${index + 1}`,
        render: {
          fillStyle: "rgba(255, 255, 255)",
        },
      },
    );
    Composite.add(world, circle);
    return circle;
  });

  const buttonCircles = circles.slice(0, 4); // Solo los primeros 4 círculos

  function syncButtons() {
    buttonCircles.forEach((circle, index) => {
      const button = document.querySelector(
        `button[data-id="circle-${index + 1}"]`,
      );
      if (button) {
        button.style.position = "absolute";
        button.style.left = `${circle.position.x - button.offsetWidth / 2}px`;
        button.style.top = `${circle.position.y - button.offsetHeight / 2}px`;
        // get width and height from circle
        button.style.width = `${circle.circleRadius * 2}px`;
        button.style.height = `${circle.circleRadius * 2}px`;
      }
    });

    requestAnimationFrame(syncButtons);
  }
  syncButtons();

  const setCurrentAward = (index: number) => {
    const award = awards[index];
    if (award) {
      document.querySelector(".award-name").textContent = award.title;
      document.querySelector(".award-description").textContent =
        award.description;
    }
  };

  let lastCircleClicked;
  document.querySelectorAll(".circle-btn").forEach((button) => {
    button.addEventListener("click", () => {
      const circle = buttonCircles.find((c) => c.label === button.dataset.id);
      if (circle) {
        let activeButton = document.querySelector(".circle-btn.active");
        if (activeButton) {
          activeButton.querySelector("img").style.scale = "0";
          activeButton.classList.remove("active");
        }

        button.classList.add("active");
        button.querySelector("img").style.scale = "none";

        if (lastCircleClicked) {
          Matter.Body.scale(lastCircleClicked, 0.5, 0.5);
        }

        Matter.Body.scale(circle, 2, 2);
        lastCircleClicked = circle;

        setCurrentAward(button.dataset.id.replace("circle-", ""));
        // Matter.Body.applyForce(circle, circle.position, { x: 0.05, y: -0.05 });
      }
    });
  });

  // **5️⃣ Habilitar Control del Ratón**
  const mouse = Mouse.create(render.canvas);
  const mouseConstraint = MouseConstraint.create(engine, {
    mouse: mouse,
    constraint: { stiffness: 0.2, render: { visible: false } },
  });
  Composite.add(world, mouseConstraint);

  // **6️⃣ Bordes para evitar que salgan de pantalla**
  Composite.add(world, [
    Bodies.rectangle(window.innerWidth / 2, 0, height, 20, {
      isStatic: true,
      render: { visible: false },
    }),
    Bodies.rectangle(window.innerWidth / 2, height, window.innerWidth, 20, {
      isStatic: true,
      render: { visible: false },
    }),
    Bodies.rectangle(0, height / 2, 20, height, {
      isStatic: true,
      render: { visible: false },
    }),
    Bodies.rectangle(window.innerWidth, height / 2, 20, height, {
      isStatic: true,
      render: { visible: false },
    }),
  ]);

  // click to first button
  const firstButton = document.querySelectorAll(".circle-btn")[0];
  if (firstButton) {
    firstButton.click();
  }
</script>
